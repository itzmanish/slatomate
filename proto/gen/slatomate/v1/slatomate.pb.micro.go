// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/slatomate/v1/slatomate.proto

package v1

import (
	fmt "fmt"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "github.com/itzmanish/go-micro/v2/api"
	client "github.com/itzmanish/go-micro/v2/client"
	server "github.com/itzmanish/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SlatomateService service

func NewSlatomateServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "SlatomateService.Health",
			Path:    []string{"/v1/slatomate/health"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "SlatomateService.CreateOrganization",
			Path:    []string{"/v1/slatomate/org"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SlatomateService.AuthorizeOrganization",
			Path:    []string{"/v1/slatomate/org/authorize"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "SlatomateService.ValidateOrgAccess",
			Path:    []string{"/v1/slatomate/org/{org_id}/authorized"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "SlatomateService.GetAllOrganization",
			Path:    []string{"/v1/slatomate/orgs"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "SlatomateService.GetOrganization",
			Path:    []string{"/v1/slatomate/org/{id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "SlatomateService.DeleteOrganization",
			Path:    []string{"/v1/slatomate/org/{id}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		{
			Name:    "SlatomateService.DeleteAllOrganization",
			Path:    []string{"/v1/slatomate/orgs"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		{
			Name:    "SlatomateService.CreateUser",
			Path:    []string{"/v1/slatomate/user"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SlatomateService.GetUser",
			Path:    []string{"/v1/slatomate/user/{id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "SlatomateService.DeleteUser",
			Path:    []string{"/v1/slatomate/user/{id}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		{
			Name:    "SlatomateService.UpdateUser",
			Path:    []string{"/v1/slatomate/user/{id}"},
			Method:  []string{"PATCH"},
			Body:    "name",
			Handler: "rpc",
		},
		{
			Name:    "SlatomateService.LoginUser",
			Path:    []string{"/v1/slatomate/login"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SlatomateService.Me",
			Path:    []string{"/v1/slatomate/user/me"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "SlatomateService.GenerateAPIKey",
			Path:    []string{"/v1/slatomate/user/api_key"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "SlatomateService.CreateJob",
			Path:    []string{"/v1/slatomate/org/{org_id}/job"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SlatomateService.GetJob",
			Path:    []string{"/v1/slatomate/org/{org_id}/job"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SlatomateService.DeleteJob",
			Path:    []string{"/v1/slatomate/org/{org_id}/job/{id}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		{
			Name:    "SlatomateService.GetAllJob",
			Path:    []string{"/v1/slatomate/org/{org_id}/jobs"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
	}
}

// Client API for SlatomateService service

type SlatomateService interface {
	Health(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*HealthResponse, error)
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...client.CallOption) (*Organization, error)
	AuthorizeOrganization(ctx context.Context, in *AuthorizeOrganizationRequest, opts ...client.CallOption) (*GenericResponse, error)
	ValidateOrgAccess(ctx context.Context, in *ValidateOrgAccessRequest, opts ...client.CallOption) (*ValidateOrgAccessResponse, error)
	GetAllOrganization(ctx context.Context, in *GetAllOrganizationRequest, opts ...client.CallOption) (*GetAllOrganizationResponse, error)
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...client.CallOption) (*Organization, error)
	DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...client.CallOption) (*emptypb.Empty, error)
	DeleteAllOrganization(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*emptypb.Empty, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*User, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...client.CallOption) (*User, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*emptypb.Empty, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*User, error)
	LoginUser(ctx context.Context, in *User, opts ...client.CallOption) (*User, error)
	Me(ctx context.Context, in *APIKeyRequest, opts ...client.CallOption) (*User, error)
	// Not for now
	GenerateAPIKey(ctx context.Context, in *GenerateAPIKeyRequest, opts ...client.CallOption) (*GenerateAPIKeyResponse, error)
	// Admin only
	GetAllUser(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*GetAllUserResponse, error)
	// Jobs
	CreateJob(ctx context.Context, in *Job, opts ...client.CallOption) (*Job, error)
	GetJob(ctx context.Context, in *GetJobRequest, opts ...client.CallOption) (*Job, error)
	DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...client.CallOption) (*emptypb.Empty, error)
	GetAllJob(ctx context.Context, in *GetAllJobRequset, opts ...client.CallOption) (*GetAllJobResponse, error)
}

type slatomateService struct {
	c    client.Client
	name string
}

func NewSlatomateService(name string, c client.Client) SlatomateService {
	return &slatomateService{
		c:    c,
		name: name,
	}
}

func (c *slatomateService) Health(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*HealthResponse, error) {
	req := c.c.NewRequest(c.name, "SlatomateService.Health", in)
	out := new(HealthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slatomateService) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...client.CallOption) (*Organization, error) {
	req := c.c.NewRequest(c.name, "SlatomateService.CreateOrganization", in)
	out := new(Organization)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slatomateService) AuthorizeOrganization(ctx context.Context, in *AuthorizeOrganizationRequest, opts ...client.CallOption) (*GenericResponse, error) {
	req := c.c.NewRequest(c.name, "SlatomateService.AuthorizeOrganization", in)
	out := new(GenericResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slatomateService) ValidateOrgAccess(ctx context.Context, in *ValidateOrgAccessRequest, opts ...client.CallOption) (*ValidateOrgAccessResponse, error) {
	req := c.c.NewRequest(c.name, "SlatomateService.ValidateOrgAccess", in)
	out := new(ValidateOrgAccessResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slatomateService) GetAllOrganization(ctx context.Context, in *GetAllOrganizationRequest, opts ...client.CallOption) (*GetAllOrganizationResponse, error) {
	req := c.c.NewRequest(c.name, "SlatomateService.GetAllOrganization", in)
	out := new(GetAllOrganizationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slatomateService) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...client.CallOption) (*Organization, error) {
	req := c.c.NewRequest(c.name, "SlatomateService.GetOrganization", in)
	out := new(Organization)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slatomateService) DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "SlatomateService.DeleteOrganization", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slatomateService) DeleteAllOrganization(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "SlatomateService.DeleteAllOrganization", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slatomateService) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "SlatomateService.CreateUser", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slatomateService) GetUser(ctx context.Context, in *GetUserRequest, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "SlatomateService.GetUser", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slatomateService) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "SlatomateService.DeleteUser", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slatomateService) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "SlatomateService.UpdateUser", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slatomateService) LoginUser(ctx context.Context, in *User, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "SlatomateService.LoginUser", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slatomateService) Me(ctx context.Context, in *APIKeyRequest, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "SlatomateService.Me", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slatomateService) GenerateAPIKey(ctx context.Context, in *GenerateAPIKeyRequest, opts ...client.CallOption) (*GenerateAPIKeyResponse, error) {
	req := c.c.NewRequest(c.name, "SlatomateService.GenerateAPIKey", in)
	out := new(GenerateAPIKeyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slatomateService) GetAllUser(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*GetAllUserResponse, error) {
	req := c.c.NewRequest(c.name, "SlatomateService.GetAllUser", in)
	out := new(GetAllUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slatomateService) CreateJob(ctx context.Context, in *Job, opts ...client.CallOption) (*Job, error) {
	req := c.c.NewRequest(c.name, "SlatomateService.CreateJob", in)
	out := new(Job)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slatomateService) GetJob(ctx context.Context, in *GetJobRequest, opts ...client.CallOption) (*Job, error) {
	req := c.c.NewRequest(c.name, "SlatomateService.GetJob", in)
	out := new(Job)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slatomateService) DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "SlatomateService.DeleteJob", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slatomateService) GetAllJob(ctx context.Context, in *GetAllJobRequset, opts ...client.CallOption) (*GetAllJobResponse, error) {
	req := c.c.NewRequest(c.name, "SlatomateService.GetAllJob", in)
	out := new(GetAllJobResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SlatomateService service

type SlatomateServiceHandler interface {
	Health(context.Context, *emptypb.Empty, *HealthResponse) error
	CreateOrganization(context.Context, *CreateOrganizationRequest, *Organization) error
	AuthorizeOrganization(context.Context, *AuthorizeOrganizationRequest, *GenericResponse) error
	ValidateOrgAccess(context.Context, *ValidateOrgAccessRequest, *ValidateOrgAccessResponse) error
	GetAllOrganization(context.Context, *GetAllOrganizationRequest, *GetAllOrganizationResponse) error
	GetOrganization(context.Context, *GetOrganizationRequest, *Organization) error
	DeleteOrganization(context.Context, *DeleteOrganizationRequest, *emptypb.Empty) error
	DeleteAllOrganization(context.Context, *emptypb.Empty, *emptypb.Empty) error
	CreateUser(context.Context, *CreateUserRequest, *User) error
	GetUser(context.Context, *GetUserRequest, *User) error
	DeleteUser(context.Context, *DeleteUserRequest, *emptypb.Empty) error
	UpdateUser(context.Context, *UpdateUserRequest, *User) error
	LoginUser(context.Context, *User, *User) error
	Me(context.Context, *APIKeyRequest, *User) error
	// Not for now
	GenerateAPIKey(context.Context, *GenerateAPIKeyRequest, *GenerateAPIKeyResponse) error
	// Admin only
	GetAllUser(context.Context, *emptypb.Empty, *GetAllUserResponse) error
	// Jobs
	CreateJob(context.Context, *Job, *Job) error
	GetJob(context.Context, *GetJobRequest, *Job) error
	DeleteJob(context.Context, *DeleteJobRequest, *emptypb.Empty) error
	GetAllJob(context.Context, *GetAllJobRequset, *GetAllJobResponse) error
}

func RegisterSlatomateServiceHandler(s server.Server, hdlr SlatomateServiceHandler, opts ...server.HandlerOption) error {
	type slatomateService interface {
		Health(ctx context.Context, in *emptypb.Empty, out *HealthResponse) error
		CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, out *Organization) error
		AuthorizeOrganization(ctx context.Context, in *AuthorizeOrganizationRequest, out *GenericResponse) error
		ValidateOrgAccess(ctx context.Context, in *ValidateOrgAccessRequest, out *ValidateOrgAccessResponse) error
		GetAllOrganization(ctx context.Context, in *GetAllOrganizationRequest, out *GetAllOrganizationResponse) error
		GetOrganization(ctx context.Context, in *GetOrganizationRequest, out *Organization) error
		DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, out *emptypb.Empty) error
		DeleteAllOrganization(ctx context.Context, in *emptypb.Empty, out *emptypb.Empty) error
		CreateUser(ctx context.Context, in *CreateUserRequest, out *User) error
		GetUser(ctx context.Context, in *GetUserRequest, out *User) error
		DeleteUser(ctx context.Context, in *DeleteUserRequest, out *emptypb.Empty) error
		UpdateUser(ctx context.Context, in *UpdateUserRequest, out *User) error
		LoginUser(ctx context.Context, in *User, out *User) error
		Me(ctx context.Context, in *APIKeyRequest, out *User) error
		GenerateAPIKey(ctx context.Context, in *GenerateAPIKeyRequest, out *GenerateAPIKeyResponse) error
		GetAllUser(ctx context.Context, in *emptypb.Empty, out *GetAllUserResponse) error
		CreateJob(ctx context.Context, in *Job, out *Job) error
		GetJob(ctx context.Context, in *GetJobRequest, out *Job) error
		DeleteJob(ctx context.Context, in *DeleteJobRequest, out *emptypb.Empty) error
		GetAllJob(ctx context.Context, in *GetAllJobRequset, out *GetAllJobResponse) error
	}
	type SlatomateService struct {
		slatomateService
	}
	h := &slatomateServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SlatomateService.Health",
		Path:    []string{"/v1/slatomate/health"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SlatomateService.CreateOrganization",
		Path:    []string{"/v1/slatomate/org"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SlatomateService.AuthorizeOrganization",
		Path:    []string{"/v1/slatomate/org/authorize"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SlatomateService.ValidateOrgAccess",
		Path:    []string{"/v1/slatomate/org/{org_id}/authorized"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SlatomateService.GetAllOrganization",
		Path:    []string{"/v1/slatomate/orgs"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SlatomateService.GetOrganization",
		Path:    []string{"/v1/slatomate/org/{id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SlatomateService.DeleteOrganization",
		Path:    []string{"/v1/slatomate/org/{id}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SlatomateService.DeleteAllOrganization",
		Path:    []string{"/v1/slatomate/orgs"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SlatomateService.CreateUser",
		Path:    []string{"/v1/slatomate/user"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SlatomateService.GetUser",
		Path:    []string{"/v1/slatomate/user/{id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SlatomateService.DeleteUser",
		Path:    []string{"/v1/slatomate/user/{id}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SlatomateService.UpdateUser",
		Path:    []string{"/v1/slatomate/user/{id}"},
		Method:  []string{"PATCH"},
		Body:    "name",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SlatomateService.LoginUser",
		Path:    []string{"/v1/slatomate/login"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SlatomateService.Me",
		Path:    []string{"/v1/slatomate/user/me"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SlatomateService.GenerateAPIKey",
		Path:    []string{"/v1/slatomate/user/api_key"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SlatomateService.CreateJob",
		Path:    []string{"/v1/slatomate/org/{org_id}/job"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SlatomateService.GetJob",
		Path:    []string{"/v1/slatomate/org/{org_id}/job"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SlatomateService.DeleteJob",
		Path:    []string{"/v1/slatomate/org/{org_id}/job/{id}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SlatomateService.GetAllJob",
		Path:    []string{"/v1/slatomate/org/{org_id}/jobs"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&SlatomateService{h}, opts...))
}

type slatomateServiceHandler struct {
	SlatomateServiceHandler
}

func (h *slatomateServiceHandler) Health(ctx context.Context, in *emptypb.Empty, out *HealthResponse) error {
	return h.SlatomateServiceHandler.Health(ctx, in, out)
}

func (h *slatomateServiceHandler) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, out *Organization) error {
	return h.SlatomateServiceHandler.CreateOrganization(ctx, in, out)
}

func (h *slatomateServiceHandler) AuthorizeOrganization(ctx context.Context, in *AuthorizeOrganizationRequest, out *GenericResponse) error {
	return h.SlatomateServiceHandler.AuthorizeOrganization(ctx, in, out)
}

func (h *slatomateServiceHandler) ValidateOrgAccess(ctx context.Context, in *ValidateOrgAccessRequest, out *ValidateOrgAccessResponse) error {
	return h.SlatomateServiceHandler.ValidateOrgAccess(ctx, in, out)
}

func (h *slatomateServiceHandler) GetAllOrganization(ctx context.Context, in *GetAllOrganizationRequest, out *GetAllOrganizationResponse) error {
	return h.SlatomateServiceHandler.GetAllOrganization(ctx, in, out)
}

func (h *slatomateServiceHandler) GetOrganization(ctx context.Context, in *GetOrganizationRequest, out *Organization) error {
	return h.SlatomateServiceHandler.GetOrganization(ctx, in, out)
}

func (h *slatomateServiceHandler) DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, out *emptypb.Empty) error {
	return h.SlatomateServiceHandler.DeleteOrganization(ctx, in, out)
}

func (h *slatomateServiceHandler) DeleteAllOrganization(ctx context.Context, in *emptypb.Empty, out *emptypb.Empty) error {
	return h.SlatomateServiceHandler.DeleteAllOrganization(ctx, in, out)
}

func (h *slatomateServiceHandler) CreateUser(ctx context.Context, in *CreateUserRequest, out *User) error {
	return h.SlatomateServiceHandler.CreateUser(ctx, in, out)
}

func (h *slatomateServiceHandler) GetUser(ctx context.Context, in *GetUserRequest, out *User) error {
	return h.SlatomateServiceHandler.GetUser(ctx, in, out)
}

func (h *slatomateServiceHandler) DeleteUser(ctx context.Context, in *DeleteUserRequest, out *emptypb.Empty) error {
	return h.SlatomateServiceHandler.DeleteUser(ctx, in, out)
}

func (h *slatomateServiceHandler) UpdateUser(ctx context.Context, in *UpdateUserRequest, out *User) error {
	return h.SlatomateServiceHandler.UpdateUser(ctx, in, out)
}

func (h *slatomateServiceHandler) LoginUser(ctx context.Context, in *User, out *User) error {
	return h.SlatomateServiceHandler.LoginUser(ctx, in, out)
}

func (h *slatomateServiceHandler) Me(ctx context.Context, in *APIKeyRequest, out *User) error {
	return h.SlatomateServiceHandler.Me(ctx, in, out)
}

func (h *slatomateServiceHandler) GenerateAPIKey(ctx context.Context, in *GenerateAPIKeyRequest, out *GenerateAPIKeyResponse) error {
	return h.SlatomateServiceHandler.GenerateAPIKey(ctx, in, out)
}

func (h *slatomateServiceHandler) GetAllUser(ctx context.Context, in *emptypb.Empty, out *GetAllUserResponse) error {
	return h.SlatomateServiceHandler.GetAllUser(ctx, in, out)
}

func (h *slatomateServiceHandler) CreateJob(ctx context.Context, in *Job, out *Job) error {
	return h.SlatomateServiceHandler.CreateJob(ctx, in, out)
}

func (h *slatomateServiceHandler) GetJob(ctx context.Context, in *GetJobRequest, out *Job) error {
	return h.SlatomateServiceHandler.GetJob(ctx, in, out)
}

func (h *slatomateServiceHandler) DeleteJob(ctx context.Context, in *DeleteJobRequest, out *emptypb.Empty) error {
	return h.SlatomateServiceHandler.DeleteJob(ctx, in, out)
}

func (h *slatomateServiceHandler) GetAllJob(ctx context.Context, in *GetAllJobRequset, out *GetAllJobResponse) error {
	return h.SlatomateServiceHandler.GetAllJob(ctx, in, out)
}
