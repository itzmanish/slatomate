// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/slatomate/slatomate.proto

package slatomate

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

import (
	context "context"
	api "github.com/itzmanish/go-micro/v2/api"
	client "github.com/itzmanish/go-micro/v2/client"
	server "github.com/itzmanish/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Slatomate service

func NewSlatomateEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Slatomate service

type SlatomateService interface {
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...client.CallOption) (*Project, error)
	GetAllProjct(ctx context.Context, in *GetAllProjectRequest, opts ...client.CallOption) (*GetAllProjectResponse, error)
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...client.CallOption) (*Project, error)
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...client.CallOption) (*emptypb.Empty, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*User, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...client.CallOption) (*User, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*emptypb.Empty, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*User, error)
	// Not for now
	GenerateAPIKey(ctx context.Context, in *GenerateAPIKeyRequest, opts ...client.CallOption) (*GenerateAPIKeyResponse, error)
	// Admin only
	GetAllUser(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*GetAllUserResponse, error)
}

type slatomateService struct {
	c    client.Client
	name string
}

func NewSlatomateService(name string, c client.Client) SlatomateService {
	return &slatomateService{
		c:    c,
		name: name,
	}
}

func (c *slatomateService) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...client.CallOption) (*Project, error) {
	req := c.c.NewRequest(c.name, "Slatomate.CreateProject", in)
	out := new(Project)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slatomateService) GetAllProjct(ctx context.Context, in *GetAllProjectRequest, opts ...client.CallOption) (*GetAllProjectResponse, error) {
	req := c.c.NewRequest(c.name, "Slatomate.GetAllProjct", in)
	out := new(GetAllProjectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slatomateService) GetProject(ctx context.Context, in *GetProjectRequest, opts ...client.CallOption) (*Project, error) {
	req := c.c.NewRequest(c.name, "Slatomate.GetProject", in)
	out := new(Project)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slatomateService) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "Slatomate.DeleteProject", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slatomateService) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "Slatomate.CreateUser", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slatomateService) GetUser(ctx context.Context, in *GetUserRequest, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "Slatomate.GetUser", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slatomateService) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "Slatomate.DeleteUser", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slatomateService) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "Slatomate.UpdateUser", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slatomateService) GenerateAPIKey(ctx context.Context, in *GenerateAPIKeyRequest, opts ...client.CallOption) (*GenerateAPIKeyResponse, error) {
	req := c.c.NewRequest(c.name, "Slatomate.GenerateAPIKey", in)
	out := new(GenerateAPIKeyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slatomateService) GetAllUser(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*GetAllUserResponse, error) {
	req := c.c.NewRequest(c.name, "Slatomate.GetAllUser", in)
	out := new(GetAllUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Slatomate service

type SlatomateHandler interface {
	CreateProject(context.Context, *CreateProjectRequest, *Project) error
	GetAllProjct(context.Context, *GetAllProjectRequest, *GetAllProjectResponse) error
	GetProject(context.Context, *GetProjectRequest, *Project) error
	DeleteProject(context.Context, *DeleteProjectRequest, *emptypb.Empty) error
	CreateUser(context.Context, *CreateUserRequest, *User) error
	GetUser(context.Context, *GetUserRequest, *User) error
	DeleteUser(context.Context, *DeleteUserRequest, *emptypb.Empty) error
	UpdateUser(context.Context, *UpdateUserRequest, *User) error
	// Not for now
	GenerateAPIKey(context.Context, *GenerateAPIKeyRequest, *GenerateAPIKeyResponse) error
	// Admin only
	GetAllUser(context.Context, *emptypb.Empty, *GetAllUserResponse) error
}

func RegisterSlatomateHandler(s server.Server, hdlr SlatomateHandler, opts ...server.HandlerOption) error {
	type slatomate interface {
		CreateProject(ctx context.Context, in *CreateProjectRequest, out *Project) error
		GetAllProjct(ctx context.Context, in *GetAllProjectRequest, out *GetAllProjectResponse) error
		GetProject(ctx context.Context, in *GetProjectRequest, out *Project) error
		DeleteProject(ctx context.Context, in *DeleteProjectRequest, out *emptypb.Empty) error
		CreateUser(ctx context.Context, in *CreateUserRequest, out *User) error
		GetUser(ctx context.Context, in *GetUserRequest, out *User) error
		DeleteUser(ctx context.Context, in *DeleteUserRequest, out *emptypb.Empty) error
		UpdateUser(ctx context.Context, in *UpdateUserRequest, out *User) error
		GenerateAPIKey(ctx context.Context, in *GenerateAPIKeyRequest, out *GenerateAPIKeyResponse) error
		GetAllUser(ctx context.Context, in *emptypb.Empty, out *GetAllUserResponse) error
	}
	type Slatomate struct {
		slatomate
	}
	h := &slatomateHandler{hdlr}
	return s.Handle(s.NewHandler(&Slatomate{h}, opts...))
}

type slatomateHandler struct {
	SlatomateHandler
}

func (h *slatomateHandler) CreateProject(ctx context.Context, in *CreateProjectRequest, out *Project) error {
	return h.SlatomateHandler.CreateProject(ctx, in, out)
}

func (h *slatomateHandler) GetAllProjct(ctx context.Context, in *GetAllProjectRequest, out *GetAllProjectResponse) error {
	return h.SlatomateHandler.GetAllProjct(ctx, in, out)
}

func (h *slatomateHandler) GetProject(ctx context.Context, in *GetProjectRequest, out *Project) error {
	return h.SlatomateHandler.GetProject(ctx, in, out)
}

func (h *slatomateHandler) DeleteProject(ctx context.Context, in *DeleteProjectRequest, out *emptypb.Empty) error {
	return h.SlatomateHandler.DeleteProject(ctx, in, out)
}

func (h *slatomateHandler) CreateUser(ctx context.Context, in *CreateUserRequest, out *User) error {
	return h.SlatomateHandler.CreateUser(ctx, in, out)
}

func (h *slatomateHandler) GetUser(ctx context.Context, in *GetUserRequest, out *User) error {
	return h.SlatomateHandler.GetUser(ctx, in, out)
}

func (h *slatomateHandler) DeleteUser(ctx context.Context, in *DeleteUserRequest, out *emptypb.Empty) error {
	return h.SlatomateHandler.DeleteUser(ctx, in, out)
}

func (h *slatomateHandler) UpdateUser(ctx context.Context, in *UpdateUserRequest, out *User) error {
	return h.SlatomateHandler.UpdateUser(ctx, in, out)
}

func (h *slatomateHandler) GenerateAPIKey(ctx context.Context, in *GenerateAPIKeyRequest, out *GenerateAPIKeyResponse) error {
	return h.SlatomateHandler.GenerateAPIKey(ctx, in, out)
}

func (h *slatomateHandler) GetAllUser(ctx context.Context, in *emptypb.Empty, out *GetAllUserResponse) error {
	return h.SlatomateHandler.GetAllUser(ctx, in, out)
}
